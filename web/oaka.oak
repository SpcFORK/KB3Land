std := import('std')
str := import('str')
json := import('json')
fmt := import('fmt')
path := import('path')

w := window

// ---

fn windowBind(fns...) {
  with std.each(fns) fn (it) {
    window.(it.name) <- it
    window.('OK' + it.name) <- it
    
    globalThis.(it.name) <- it
    globalThis.('OK' + it.name) <- it
  }
}

windowBind(

  // Stringify JS interop
  fn s(pl) string(pl).toString()
  
  fn kb(func, pls) {
    strings := with std.map(pls) fn (it, i?) it |> s()
  
    func(strings...)
  }
  
  // ---

  fn do(code) eval(code |> s())
  fn assign(name, code) w.(name |> string()) <- do(code)
  
  // ---
  
  // If an oakstr, force stringification for JS envs.
  fn abstr?(thing, op) if type(thing) {
    :string -> op(thing)
  }

  fn windowFullscreen? {
    window.innerHeight = screen.height
  }
  
  // ---

  fn clense(args, pos) with abstr?(args.(pos)) fn(it) it <- it |> s()
  
  fn sprite(args...) {
    args |> clense(0)
    
    w.sprite(args...)
  }
  
  fn loadSprite(args...) {
    with kb(w.loadSprite) args
  }

  fn onKeyDown(args...) {
    args |> clense(0)

    w.onKeyDown(args...)
  }

)